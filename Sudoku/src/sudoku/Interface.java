package sudoku;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import javax.swing.JFileChooser;

public class Interface extends javax.swing.JFrame {

    boolean sudoku;
    boolean selection;
    int row;
    int col;
    Grid gameGrid;
    Player player;

    public Interface(Grid grid) {
        sudoku = false;
        player = new Player();
        gameGrid = grid;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jFileChooser1 = new javax.swing.JFileChooser();
        jPanelTab = new javax.swing.JPanel();
        jPanelNum = new javax.swing.JPanel();
        jButBack = new javax.swing.JButton();
        jButFC = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pr√°ctica SISTEMAS INTELIGENTES. SUDOKU");
        setResizable(false);

        jPanelTab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jPanelTab.setForeground(new java.awt.Color(255, 255, 255));
        jPanelTab.setPreferredSize(new java.awt.Dimension(315, 315));
        jPanelTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanelTabMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelTabLayout = new org.jdesktop.layout.GroupLayout(jPanelTab);
        jPanelTab.setLayout(jPanelTabLayout);
        jPanelTabLayout.setHorizontalGroup(
            jPanelTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 311, Short.MAX_VALUE)
        );
        jPanelTabLayout.setVerticalGroup(
            jPanelTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 311, Short.MAX_VALUE)
        );

        jPanelNum.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jPanelNum.setForeground(new java.awt.Color(255, 255, 255));
        jPanelNum.setPreferredSize(new java.awt.Dimension(105, 105));
        jPanelNum.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanelNumMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelNumLayout = new org.jdesktop.layout.GroupLayout(jPanelNum);
        jPanelNum.setLayout(jPanelNumLayout);
        jPanelNumLayout.setHorizontalGroup(
            jPanelNumLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 101, Short.MAX_VALUE)
        );
        jPanelNumLayout.setVerticalGroup(
            jPanelNumLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 101, Short.MAX_VALUE)
        );

        jButBack.setText("Check Solution");
        jButBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButBackActionPerformed(evt);
            }
        });

        jButFC.setText("Backtracking");
        jButFC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButFCActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jPanel1.setPreferredSize(new java.awt.Dimension(35, 35));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 31, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 31, Short.MAX_VALUE)
        );

        jButton1.setText("AC3");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("ForwardChecking");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setText("Load Sudoku");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Delete Sudoku");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelTab, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(jButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 199, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(0, 20, Short.MAX_VALUE))
                                    .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, jButFC, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, jButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .add(jButBack, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(0, 0, Short.MAX_VALUE))))
                    .add(layout.createSequentialGroup()
                        .add(38, 38, 38)
                        .add(jPanelNum, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanelNum, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(31, 31, 31)
                        .add(jButFC)
                        .add(18, 18, 18)
                        .add(jButton1)
                        .add(12, 12, 12)
                        .add(jButton2)
                        .add(16, 16, 16)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButBack, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanelTab, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * call backtracking and check if the answer is correct
     *
     * @param evt
     */
    private void jButFCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButFCActionPerformed

        // calls backtracking
        player.runBC(gameGrid);
        repaint();

        //Checks for correct solution
        if (gameGrid.checkBoard()) {
            jLabel1.setText("CORRECT!");
        } else {
            jLabel1.setText("INCORRECT!");
        }
    }//GEN-LAST:event_jButFCActionPerformed

    /**
     * Used for loading a sudoku
     *
     */
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        JFileChooser jfile = new JFileChooser();
        int ret = jfile.showOpenDialog(Interface.this);

        if (jfile.getSelectedFile() != null) {
            gameGrid.setFile(jfile.getSelectedFile().getAbsoluteFile());
            gameGrid.loadBoard();
            repaint();
            sudoku = true;
        }

        jLabel1.setText("");

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jPanelTabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelTabMouseClicked

        int cellWidth, cellHeight;

        cellWidth = jPanelTab.getSize().width / 9;
        cellHeight = jPanelTab.getSize().height / 9;

        col = (int) ((evt.getX()) / cellWidth);
        row = (int) ((evt.getY()) / cellHeight);
        selection = true;
        repaint();

    }//GEN-LAST:event_jPanelTabMouseClicked

    /**
     *
     * @param evt
     */
    private void jPanelNumMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelNumMouseClicked
        // TODO add your handling code here:
        int cellWidth, cellHeight;
        int i, j;
        int value;

        if (selection) {
            cellWidth = jPanelNum.getSize().width / 3;
            cellHeight = jPanelNum.getSize().height / 3;

            j = (int) ((evt.getX()) / cellWidth);
            i = (int) ((evt.getY()) / cellHeight);

            if (i < 2) {
                value = (i + 1) * (i + 1) + j;
            } else {
                value = 7 + j;
            }

            gameGrid.setCell(value, row, col);
            selection = false;
            repaint();
        }

    }//GEN-LAST:event_jPanelNumMouseClicked

    /**
     * delete sudoku
     *
     * @param evt
     */
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        gameGrid.cleanBoard();
        jLabel1.setText("");
        repaint();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * deletes a cell
     *
     * @param evt
     */
    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked

        //Sets selected(if any) cell to 0
        if (selection) {
            gameGrid.setCell(0, row, col);
            selection = false;
            repaint();
        }
    }//GEN-LAST:event_jPanel1MouseClicked


    private void jButBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButBackActionPerformed
        // TODO add your handling code here:

        if (gameGrid.checkBoard()) {
            jLabel1.setText("CORRECT!");
        } else {
            jLabel1.setText("INCORRECT!");
        }
    }//GEN-LAST:event_jButBackActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        //Calls AC3 algorithm
        boolean availSol = player.runAC(gameGrid);
        repaint();
        if (!availSol) {
            jLabel1.setText("There is no solution");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        player.executeFC(gameGrid);
        repaint();
        //Check if the solution is correct
        if (gameGrid.checkBoard()) {
            jLabel1.setText("CORRECT!");
        } else {
            jLabel1.setText("INCORRECT!");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButBack;
    private javax.swing.JButton jButFC;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelNum;
    private javax.swing.JPanel jPanelTab;
    private javax.swing.JPopupMenu jPopupMenu1;
    // End of variables declaration//GEN-END:variables

    //Draw board.
    @Override
    @SuppressWarnings("static-access")
    public void paint(Graphics g) {
        String number;
        int num;

        super.paint(g);
        g = jPanelTab.getGraphics();

        /**
         * ***********************************************
         * Draw Sudoku board
          ***********************************************
         */
        g.setColor(Color.BLACK);

        for (int i = 0; i <= 9; i++) {
            //Draw vertical lines
            g.drawLine(i * 35, 0, i * 35, 315);
            if (i % 3 == 0) {
                g.drawLine(i * 35 - 1, 0, i * 35 - 1, 315);
            }

            //Draw horizontal lines
            g.drawLine(0, i * 35, 315, i * 35);
            if (i % 3 == 0) {
                g.drawLine(0, i * 35 - 1, 315, i * 35 - 1);
            }

        }

        //highlight selected cell in red
        if (selection) {
            g.setColor(Color.RED);

            g.drawLine(col * 35, row * 35, (col + 1) * 35, row * 35);
            g.drawLine(col * 35, row * 35, col * 35, (row + 1) * 35);
            g.drawLine(col * 35, (row + 1) * 35, (col + 1) * 35, (row + 1) * 35);
            g.drawLine((col + 1) * 35, row * 35, (col + 1) * 35, (row + 1) * 35);

            // highlight line
            g.drawLine(col * 35, row * 35 - 1, (col + 1) * 35, row * 35 - 1);
            g.drawLine(col * 35 - 1, row * 35, col * 35 - 1, (row + 1) * 35);
            g.drawLine(col * 35, (row + 1) * 35 - 1, (col + 1) * 35, (row + 1) * 35 - 1);
            g.drawLine((col + 1) * 35 - 1, row * 35, (col + 1) * 35 - 1, (row + 1) * 35);

        }

        //Define font
        Font font = new Font("SansSerif", Font.BOLD, 30);
        g.setColor(Color.DARK_GRAY);
        g.setFont(font);

        //Draw numbers
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (gameGrid.getCell(i, j) != 0) {
                    number = "" + gameGrid.getCell(i, j);
                    g.drawString(number, j * 35 + 5, (i + 1) * 34);
                }

            }
        }

        /**
         * *********************************************************
         * Draw number selection panel
         *********************************************************
         */
        g = jPanelNum.getGraphics();

        for (int i = 1; i <= 2; i++) {
            //Draw vertical lines
            g.drawLine(i * 35, 0, i * 35, 105);

            //Draw horizontal lines
            g.drawLine(0, i * 35, 105, i * 35);
        }

        num = 1;
        g.setColor(Color.DARK_GRAY);
        g.setFont(font);
        //Draws numbers
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                number = "" + num;
                g.drawString(number, j * 35 + 6, (i + 1) * 33);
                num++;
            }
        }
    }
}
